#!/bin/bash

#
# Generate OpenVPN configs
#

# Convert 1.2.3.4/24 -> 255.255.255.0
cidr2mask()
{
    local i
    local subnetmask=""
    local cidr=${1#*/}
    local full_octets=$(($cidr/8))
    local partial_octet=$(($cidr%8))

    for ((i=0;i<4;i+=1)); do
        if [ $i -lt $full_octets ]; then
            subnetmask+=255
        elif [ $i -eq $full_octets ]; then
            subnetmask+=$((256 - 2**(8-$partial_octet)))
        else
            subnetmask+=0
        fi
        [ $i -lt 3 ] && subnetmask+=.
    done
    echo $subnetmask
}

# Used often enough to justify a function
getroute() {
    echo ${1%/*} $(cidr2mask $1)
}

usage() {
    echo "usage: $0 [-d]"
    echo "                  -u SERVER_PUBLIC_URL"
    echo "                 [-s SERVER_SUBNET]"
    echo "                 [-r ROUTE ...]"
    echo "                 [-p PUSH ...]"
    echo
    echo "optional arguments:"
    echo " -h    Show this help"
    echo " -T    Use iptables-legacy instead of nf-tables"
    echo " -d    Disable NAT routing and default route"
    echo " -c    Enable client-to-client option"
    echo " -D    Disable built in external dns (google dns)"
    echo " -N    Configure NAT to access external server network"
    echo " -m    Set tun-mtu"
    echo " -y    Authentication with Yubikey OTP. IDs stored in local file"
    echo " -Y    Authentication with Yubikey OTP. IDs stored in LDAP"
    echo " -L    Authentication with Password stored in LDAP. Can be combined with Yubikey with LDAP backend"
    echo " -R    Authentication via Radius server"
    echo " -X    Make client certificate optional. Only use if 2FA already is configure, such as Yubikey and password"
}

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

OVPN_ENV=$OPENVPN/ovpn_env.sh
OVPN_SERVER=192.168.255.0/24
OVPN_USE_IPTABLES_LEGACY=0
OVPN_DEFROUTE=1
OVPN_NAT=0
OVPN_DNS=1
OVPN_ROUTES=()
TMP_ROUTES=()
OVPN_PUSH=()
TMP_PUSH=()

# Import defaults if present
[ -r "$OVPN_ENV" ] && source "$OVPN_ENV"

# Parse arguments
while getopts ":r:s:du:cp:DNm:yYLRXhT" opt; do
    case $opt in
        r)
            TMP_ROUTES+=("$OPTARG")
            ;;
        s)
            OVPN_SERVER=$OPTARG
            ;;
        d)
            OVPN_DEFROUTE=0
            ;;
        u)
            OVPN_SERVER_URL=$OPTARG
            ;;
        c)
            OVPN_CLIENT_TO_CLIENT=1
            ;;
        p)
            TMP_PUSH+=("$OPTARG")
            ;;
        D)
            OVPN_DNS=0
            ;;
        N)
            OVPN_NAT=1
            ;;
        m)
            OVPN_MTU=$OPTARG
            ;;
        y)
            USE_YUBIKEY_FILE=1
            ;;
        Y)
            USE_YUBIKEY=1
            ;;
        L)
            USE_LDAP=1
            ;;
        R)
            USE_RADIUS=1
            ;;
        T)
            OVPN_USE_IPTABLES_LEGACY=1
            ;;
        X)
            CLIENT_CERT_OPTIONAL=1
            ;;
        h)
            usage
            exit 0
            ;;
        \?)
            set +x
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            set +x
            echo "Option -$OPTARG requires an argument." >&2
            usage
            exit 1
            ;;
    esac
done

# if new routes were not defined with -r, use default
[ ${#TMP_ROUTES[@]} -gt 0 ] && OVPN_ROUTES=("${TMP_ROUTES[@]}")

# if new push directives were not defined with -p, use default
[ ${#TMP_PUSH[@]} -gt 0 ] && OVPN_PUSH=("${TMP_PUSH[@]}")

# Server name is in the form "udp://vpn.example.com:1194"
if [[ "$OVPN_SERVER_URL" =~ ^((udp|tcp)://)?([0-9a-zA-Z\.\-]+)(:([0-9]+))?$ ]]; then
    OVPN_PROTO=${BASH_REMATCH[2]};
    OVPN_CN=${BASH_REMATCH[3]};
    OVPN_PORT=${BASH_REMATCH[5]};
else
    set +x
    echo "Common name not specified, see '-u'"
    usage
    exit 1
fi

# Apply defaults
[ -z "$OVPN_PROTO" ] && OVPN_PROTO=udp
[ -z "$OVPN_PORT" ] && OVPN_PORT=1194
[ ${#OVPN_ROUTES[@]} -eq 0 ] && OVPN_ROUTES=("192.168.254.0/24")

export OVPN_USE_IPTABLES_LEGACY
export OVPN_SERVER OVPN_ROUTES OVPN_DEFROUTE
export OVPN_SERVER_URL OVPN_ENV OVPN_PROTO OVPN_CN OVPN_PORT
export OVPN_CLIENT_TO_CLIENT OVPN_PUSH OVPN_NAT OVPN_DNS OVPN_MTU

# Preserve config
if [ -f "$OVPN_ENV" ]; then
    bak_env=$OVPN_ENV.$(date +%s).bak
    echo "Backing up $OVPN_ENV -> $bak_env"
    mv "$OVPN_ENV" "$bak_env"
fi
export | grep OVPN_ > "$OVPN_ENV"

conf=$OPENVPN/openvpn.conf
if [ -f "$conf" ]; then
    bak=$conf.$(date +%s).bak
    echo "Backing up $conf -> $bak"
    mv "$conf" "$bak"
fi

cat > "$conf" <<EOF
server $(getroute $OVPN_SERVER)
tls-server
verb 3
crl-verify $OPENVPN/crl.pem
key $EASYRSA_PKI/private/${OVPN_CN}.key
ca $EASYRSA_PKI/ca.crt
cert $EASYRSA_PKI/issued/${OVPN_CN}.crt
dh $EASYRSA_PKI/dh.pem
tls-auth $EASYRSA_PKI/ta.key
key-direction 0
keepalive 10 60
persist-key
persist-tun
comp-lzo
mute 20
float
remote-cert-eku "TLS Web Client Authentication"
remote-cert-ku 80 08 88
cipher AES-256-CBC
auth SHA256
tls-cipher TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256:TLS-DHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256
tls-version-min 1.2

proto $OVPN_PROTO
# Rely on Docker to do port mapping, internally always 1194
port 1194
dev tun0
status /tmp/openvpn-status.log

client-config-dir $OPENVPN/ccd

# Performance tweaks
txqueuelen 200
sndbuf 393216
rcvbuf 393216
fast-io

user nobody
group nogroup
EOF


[ -n "$OVPN_MTU" ] && echo "tun-mtu $OVPN_MTU" >> "$conf"
[ -n "$OVPN_CLIENT_TO_CLIENT" ] && echo "client-to-client" >> "$conf"
[ "$OVPN_DNS" == "1" ] && echo push \"dhcp-option DNS 8.8.4.4\" >> "$conf"
[ "$OVPN_DNS" == "1" ] && echo push \"dhcp-option DNS 8.8.8.8\" >> "$conf"
[ "$OVPN_DNS" == "1" ] && echo push \"block-outside-dns\" >> "$conf"
# Append Routes
for i in "${OVPN_ROUTES[@]}"; do
    # If user passed "0" skip this, assume no extra routes
    [ "$i" = "0" ] && break;
    echo route $(getroute "$i") >> "$conf"
done

# Append push commands
for i in "${OVPN_PUSH[@]}"; do
    echo push \"$i\" >> "$conf"
done

set +e 

# Clean-up duplicate configs
if diff -q "$bak_env" "$OVPN_ENV" 2>/dev/null; then
    echo "Removing duplicate back-up: $bak_env"
    rm -fv "$bak_env"
fi
if diff -q "$bak" "$conf" 2>/dev/null; then
    echo "Removing duplicate back-up: $bak"
    rm -fv "$bak"
fi

if [ -n "$USE_LDAP" ] && [ -n "$USE_YUBIKEY" ] ; then
    PAM_METHOD=external
    cp /examples/openvpn_external.example-yubikey-and-ldap $OPENVPN
    cp /examples/ldap.conf.example $OPENVPN
elif [ -n "$USE_LDAP" ] ; then
    PAM_METHOD=ldap
    cp /examples/ldap.conf.example $OPENVPN
elif [ -n "$USE_YUBIKEY" ] ; then
    PAM_METHOD=external
    cp /examples/openvpn_external.example-yubikey $OPENVPN
elif [ -n "$USE_YUBIKEY_FILE" ] ; then
    PAM_METHOD=yubikey-file
    cp /examples/yubikey_mappings.example $OPENVPN
elif [ -n "$USE_RADIUS" ] ; then
    PAM_METHOD=radius
    cp /examples/pam_radius_auth.conf.example $OPENVPN
fi

if [ -n "$PAM_METHOD" ]; then
    echo "Will configure usage of authentication via PAM"
    echo "\
# Enable PAM for user authentication
plugin /usr/lib/x86_64-linux-gnu/openvpn/plugins/openvpn-plugin-auth-pam.so openvpn_$PAM_METHOD

# Disable renegotiation, otherwise user need to relogin now and then
#    and it works bad with one-time password 
reneg-sec 0" >> "$conf"
fi

[ -n "$CLIENT_CERT_OPTIONAL" ] && echo "verify-client-cert optional" >> "$conf"

if [ ! -f "$OPENVPN/vars" ]; then
    cat > $OPENVPN/vars << EOF
set_var EASYRSA                 "$PWD"
set_var EASYRSA_PKI             "/etc/easy-rsa/pki"
set_var EASYRSA_DN              "cn_only"
set_var EASYRSA_REQ_COUNTRY     "EX"
set_var EASYRSA_REQ_PROVINCE    "Example area"
set_var EASYRSA_REQ_CITY        "Example city"
set_var EASYRSA_REQ_ORG         "Example CERTIFICATE AUTHORITY"
set_var EASYRSA_REQ_EMAIL       "ca@example.com"
set_var EASYRSA_REQ_OU          "Example CA"
set_var EASYRSA_KEY_SIZE        2048
set_var EASYRSA_ALGO            rsa
set_var EASYRSA_CA_EXPIRE       9130 
set_var EASYRSA_CERT_EXPIRE     3650
set_var EASYRSA_NS_SUPPORT      "no"
set_var EASYRSA_NS_COMMENT      "Example CERTIFICATE AUTHORITY"
set_var EASYRSA_EXT_DIR         "/usr/local/share/easy-rsa/x509-types"
set_var EASYRSA_SSL_CONF        "/usr/local/share/easy-rsa/openssl-easyrsa.cnf"
set_var EASYRSA_DIGEST          "sha256"
EOF
fi

echo "Successfully generated config"
